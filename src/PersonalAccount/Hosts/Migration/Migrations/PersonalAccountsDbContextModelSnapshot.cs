// <auto-generated />
using System;
using InsuranceGoSmoke.PersonalAccount.Infrastructures.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InsuranceGoSmoke.PersonalAccount.Hosts.Migrations.Migrations
{
    [DbContext(typeof(PersonalAccountsDbContext))]
    partial class PersonalAccountsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.AccountStatus", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClientId"));

                    b.Property<bool>("IsAccessible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPremium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("ClientId");

                    b.ToTable("AccountStatuses");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.Avatar", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClientId"));

                    b.Property<Guid>("ImageData")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.HasKey("ClientId");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.AvatarHistory", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageData")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("ClientId", "UploadDate");

                    b.ToTable("AvatarHistories");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.PrivacySettings", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClientId"));

                    b.Property<bool>("ShowBirthdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowDescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("ClientId");

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.ProfileDesign", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClientId"));

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EnableAnimations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("FontStyle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ThemeColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ClientId");

                    b.ToTable("ProfileDesigns");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.PurchaseHistory", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatusPurchased")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ClientId");

                    b.ToTable("PurchaseHistories");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.SmokingDescription", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClientId"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<bool>("IsDrink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSmoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsVape")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ReadyMeeting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ReasonStartedSmoking")
                        .HasColumnType("text");

                    b.Property<int?>("SmokingExperienceYears")
                        .HasColumnType("integer");

                    b.HasKey("ClientId");

                    b.ToTable("SmokingDescriptions");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", b =>
                {
                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.AccountStatus", "AccountStatus")
                        .WithOne()
                        .HasForeignKey("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.Avatar", "Avatar")
                        .WithOne()
                        .HasForeignKey("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.PrivacySettings", "PrivacySettings")
                        .WithOne()
                        .HasForeignKey("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.ProfileDesign", "ProfileDesign")
                        .WithOne()
                        .HasForeignKey("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.SmokingDescription", "SmokingDescription")
                        .WithOne()
                        .HasForeignKey("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatus");

                    b.Navigation("Avatar");

                    b.Navigation("PrivacySettings");

                    b.Navigation("ProfileDesign");

                    b.Navigation("SmokingDescription");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.AvatarHistory", b =>
                {
                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.Avatar", null)
                        .WithMany("AvatarHistories")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.PurchaseHistory", b =>
                {
                    b.HasOne("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", "User")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.Account.User", b =>
                {
                    b.Navigation("PurchaseHistories");
                });

            modelBuilder.Entity("InsuranceGoSmoke.PersonalAccount.Domain.Avatar", b =>
                {
                    b.Navigation("AvatarHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
